D:\dev\Study\SiHoonKim\imageUpload\server>npm i aws-sdk multer-s3

make "aws.js" to root directory

=======================================================
import aws from 'aws-sdk'
import dotenv from 'dotenv'
dotenv.config()

const { AWS_ACCESS_KEY, AWS_SECRET_KEY } = process.env

const s3 = new aws.S3({
  secretAccessKey: AWS_ACCESS_KEY,
  accessKeyId: AWS_ACCESS_KEY,
})

export { s3 }
========================================================

imageUpload.js

import multerS3 from 'multer-s3'
import { s3 } from '../aws'

const storage = multerS3({
  s3: s3,
  bucket: 'samyang-bucket',
  key: (req, file, cb) => {
    cb(null, `raw/${uuid()}.${mime.extension(file.mimetype)}`)
  },
})

==========================================================
imageRouter   Post

// aws에서 리턴되는 "aws/abc.jpg"에서 "aws/" 를 제거
key: file.key.replace('raw/', ''),
==========================================================
img 의 src의 주소를 변경
<img
  alt=''
  src={`https://samyang-bucket.s3.ap-northeast-2.amazonaws.com/raw/${image.key}`}
/>

============================================================
PresignedUrl !!
클라이언트에서 S3 Bucket으로 바로 이미지 업로드 가능
문제는 아무나 업로드 할 수 있게 된다. 
권한이 부여된 upload Url = Presigned Url
서버를 거치지 않으므로 빠른 퍼포먼스..

Backend에서 AWS_S3에 접속해서 PresignedUrl을 만들고 클라이언트에 전달해주면
클라인언트가 PresignedUrl을 사용하고 바로 S3에 업로드하게 된다.

imageRouter.post('/presigned', async (req, res) => {
  try {
    if (!req.user) throw new Error('권한이 없습니다. !!')

    // Type이 Array 인지 확인
    const { contentTypes } = req.body
    if (!Array.isArray(contentTypes)) throw new Error('invalid contentTypes')
    const presignedData = await Promise.all(
      contentTypes.map(async (contentTypes) => {
        # 파일명은 다른 방식으로 변경할것
        const imageKey = `${uuid()}.${mime.extension(contentTypes)}`
        const key = `raw/${imageKey}`
        const presigned = await getSignedUrl({ key })
        return { imageKey, presigned }
      })
    )
    return presignedData
  } catch (err) {
    console.error(err)
    return res.status(400).json({ message: err.message })
  }
})


















