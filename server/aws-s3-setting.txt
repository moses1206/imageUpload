D:\dev\Study\SiHoonKim\imageUpload\server>npm i aws-sdk multer-s3

=======================================================
make "aws.js" to root directory

import aws from 'aws-sdk'
import dotenv from 'dotenv'

dotenv.config()

const { AWS_ACCESS_KEY, AWS_SECRET_KEY } = process.env

const s3 = new aws.S3({
  secretAccessKey: AWS_SECRET_KEY,
  accessKeyId: AWS_ACCESS_KEY,
  region: 'ap-northeast-2',
})

const getSignedUrl = ({ key }) => {
  return new Promise((resolve, reject) => {
    s3.createPresignedPost(
      {
        Bucket: 'samyang-bucket',
        Fields: {
          key: key,
        },
        // preSignedUrl의 유효기간을 설정
        Expires: 300, //300초
        // 50MB 제한
        Conditions: [
          ['content-length-range', 0, 50 * 1024 * 1024],
          // 모든 이미지는 다 허용
          ['starts-with', '$Content-Type', 'image/'],
        ],
      },
      (err, data) => {
        if (err) reject(err)
        resolve(data)
      }
    )
  })
}

export { s3, getSignedUrl }

========================================================

imageUpload.js

import multerS3 from 'multer-s3'
import { s3 } from '../aws'

const storage = multerS3({
  s3: s3,
  bucket: 'samyang-bucket',
  key: (req, file, cb) => {
    cb(null, `raw/${uuid()}.${mime.extension(file.mimetype)}`)
  },
})

==========================================================
imageRouter   Post

// aws에서 리턴되는 "aws/abc.jpg"에서 "aws/" 를 제거
key: file.key.replace('raw/', ''),
==========================================================
img 의 src의 주소를 변경
<img
  alt=''
  src={`https://samyang-bucket.s3.ap-northeast-2.amazonaws.com/raw/${image.key}`}
/>

============================================================
PresignedUrl !!
클라이언트에서 S3 Bucket으로 바로 이미지 업로드 가능
문제는 아무나 업로드 할 수 있게 된다. 
권한이 부여된 upload Url = Presigned Url
서버를 거치지 않으므로 빠른 퍼포먼스..

Backend에서 AWS_S3에 접속해서 PresignedUrl을 만들고 클라이언트에 전달해주면
클라인언트가 PresignedUrl을 사용하고 바로 S3에 업로드하게 된다.

imageRouter.post('/presigned', async (req, res) => {
  try {
    if (!req.user) throw new Error('권한이 없습니다. !!')

    // Type이 Array 인지 확인
    const { contentTypes } = req.body
    if (!Array.isArray(contentTypes)) throw new Error('invalid contentTypes')
    const presignedData = await Promise.all(
      contentTypes.map(async (contentTypes) => {
        # 파일명은 다른 방식으로 변경할것
        const imageKey = `${uuid()}.${mime.extension(contentTypes)}`
        const key = `raw/${imageKey}`
        const presigned = await getSignedUrl({ key })
        return { imageKey, presigned }
      })
    )
    return presignedData
  } catch (err) {
    console.error(err)
    return res.status(400).json({ message: err.message })
  }
})


===================================================================================
Frontend

uploadForm.js

const onSubmitV2 = async (e) => {
  e.preventDefault()
  try {
    const presignedData = await axios.post('/images/presigned', {
      // files가 배열이 아니라서 [...files]로 배열로 변환함.
      contentTypes: [...files].map((file) => file.type),
    })

    console.log(presignedData)

    const result = await Promise.all(
      [...files].map((file, index) => {
        const { presigned } = presignedData.data[index]
        const formData = new FormData()
        for (const key in presigned.fields) {
          formData.append(key, presigned.fields[key])
        }
        formData.append('Content-Type', file.type)
        formData.append('file', file)
        const result = axios.post(presigned.url, formData)
        return result
      })
    )

    console.log(result)

    toast.success('이미지 업로드 성공!!')
    setTimeout(() => {
      setPercent(0)
      setPreviews([])
      // 동일한 이미지를 다시 올릴때 입력값의 변화가 없어서
      // onChange가 발동되지 않음.
      // inputRef를 사용하여 input 태그를 초기화 해줌.
      inputRef.current.value = null
    }, 1000)
  } catch (err) {
    console.log(err)
    toast.error(err.response.data.message)
    setPercent(0)
    setPreviews([])
  }
}

=============================================================================
samyang-buck / 권한설정
[
  {
      "AllowedHeaders": [
          "*"
      ],
      "AllowedMethods": [
          "POST"
      ],
      "AllowedOrigins": [
          "http://localhost:3000"
      ],
      "ExposeHeaders": []
  }
]

=================================================================================

데이터를 DB에 저장

imageRouter.post('/', upload.array('image', 30), async (req, res) => {
  // 유저정보 , public 유무
  try {
    if (!req.user) throw new Error('권한이 없습니다. !!')
    const { images, public2 } = req.body

    const imageDocs = await Promise.all(
      images.map((image) =>
        new Image({
          user: {
            _id: req.user.id,
            name: req.user.name,
            username: req.user.username,
          },
          public: public2,
          key: image.imageKey,
          originalFileName: image.originalname,
        }).save()
      )
    )

    res.json(imageDocs)
  } catch (err) {
    console.error(err)
    return res.status(400).json({ message: err.message })
  }
})

==================================================================
Frontend Upload 폼 변경

const onSubmitV2 = async (e) => {
  e.preventDefault()
  try {
    // preSignedUrl을 통해 이미지 파일 S3 Upload
    const presignedData = await axios.post('/images/presigned', {
      // files가 배열이 아니라서 [...files]로 배열로 변환함.
      contentTypes: [...files].map((file) => file.type),
    })

    console.log(presignedData)

    const result = await Promise.all(
      [...files].map((file, index) => {
        const { presigned } = presignedData.data[index]
        const formData = new FormData()
        for (const key in presigned.fields) {
          formData.append(key, presigned.fields[key])
        }
        formData.append('Content-Type', file.type)
        formData.append('file', file)
        const result = axios.post(presigned.url, formData, {
          onUploadProgress: (e) => {
            setPercent((prevData) => {
              const newData = [...prevData]
              newData[index] = Math.round((100 * e.loaded) / e.total)
              return newData
            })
          },
        })
        return result
      })
    )
    console.log('preSignedUrl_Uplad', result)
    console.log('...file', [...files])
    console.log('PreSignedData', presignedData.data)

    // MongoDB에 저장
    const res = await axios.post('/images', {
      images: [...files].map((file, index) => ({
        imageKey: presignedData.data[index].imageKey,
        originalname: file.name,
      })),
      public2: isPublic,
    })

    if (isPublic) setImages((prevData) => [...res.data, ...prevData])
    setMyImages((prevData) => [...res.data, ...prevData])

    toast.success('이미지 업로드 성공!!')
    setTimeout(() => {
      setPercent([])
      setPreviews([])
      // 동일한 이미지를 다시 올릴때 입력값의 변화가 없어서
      // onChange가 발동되지 않음.
      // inputRef를 사용하여 input 태그를 초기화 해줌.
      inputRef.current.value = null
    }, 1000)
  } catch (err) {
    console.log(err)
    toast.error(err.response.data.message)
    setPercent([])
    setPreviews([])
  }
}

========================================================================



